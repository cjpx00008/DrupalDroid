{"note":"Don't delete this file! It's used internally to help with page regeneration.","name":"Android-drupal-sdk","tagline":"An Android library allowing you to connect to Drupal sites running Services 3.","google":"","body":"Android Drupal SDK\r\n================================\r\n\r\nAndroid Drupal SDK is an easy to use Android client for REST servers based on Drupal and Services 3.\r\n\r\nIt is built at [Demotix.com](http://www.demotix.com/ \"Demotix.com\") by Alexandru Badiu and used in the [Demotix Android app](https://play.google.com/store/apps/details?id=com.demotix).\r\n\r\nWhile being used in an application it is work in progress and implements currently only a small number of the standard functions offered by the Services module. Feel free to add more resources.\r\n\r\nIt uses [Android Asynchronous Http Client](http://loopj.com/android-async-http/).\r\n\r\nFeatures\r\n========\r\n\r\n* Easy to use\r\n* Supports basic authentication\r\n* Persistent cookies\r\n* Tiny overhead\r\n* HTTP requests happen outside the UI thread\r\n* Smart retries, gzip, threadpool\r\n\r\nImplemented resources\r\n======================\r\n\r\n* User - login, logout\r\n* System - connect\r\n\r\nExample\r\n=======\r\n\r\nThe example supplied shows how to perform a login. It was built with IntelliJ Idea 12.\r\n\r\n\r\nGeneral implementation\r\n======================\r\n\r\nThere is a base class, ServicesClient, which takes care of storing the session information and making the POST, GET and DELETE calls.\r\n\r\nEach service group (System services, User services) is implemented in a separate class which uses the base class to make the relevant calls.\r\n\r\nUsage\r\n=====\r\n\r\nCreate a REST client that connects to example.com/api/mobile:\r\n\r\n    ServicesClient client;\r\n    client = new ServicesClient(\"http://www.example.com\", \"api/mobile\");\r\n\r\nSet basic auth credentials:\r\n    \r\n    client.setBasicAuth(\"username\",\"password/token\");\r\n\r\nAdd a persistent cookie store to save the session and reuse it between application runs:\r\n    \r\n    cookieStore = new PersistentCookieStore(this);\r\n    client.setCookieStore(cookieStore);\r\n\r\nCreate system and user services:\r\n\r\n    UserServices us;\r\n    SystemServices ss;\r\n\r\n    us = new UserServices(client);\r\n    ss = new SystemServices(client);\r\n\r\nCall system.connect and check if we are logged in:\r\n    \r\n    JsonHttpResponseHandler connectHandler = new JsonHttpResponseHandler() {\r\n        @Override\r\n        public void onSuccess(JSONObject response) {\r\n            boolean loggedin = false;\r\n            try {\r\n                JSONObject user = response.getJSONObject(\"user\");\r\n                int uid = user.getInt(\"uid\");\r\n                if (uid > 0) {\r\n                    loggedin = true;\r\n                }\r\n                else {\r\n                    loggedin = false;\r\n                }\r\n            } catch (JSONException e) {\r\n                loggedin = false;\r\n            }\r\n\r\n            if (loggedin) {\r\n                // User is already logged in, do something \r\n            }\r\n            else {\r\n                // User is not logged in, display login activity or automatically login\r\n            }\r\n        }\r\n\r\n        @Override\r\n        public void onFailure(Throwable e, JSONObject response) {\r\n            // System.Connect call failed\r\n        }\r\n\r\n        @Override\r\n        public void onFinish() {\r\n        }\r\n    };\r\n\r\n    ss.Connect(connectHandler);\r\n\r\nCall user.login:\r\n\r\n    JsonHttpResponseHandler loginHandler = new JsonHttpResponseHandler() {\r\n        @Override\r\n        public void onSuccess(JSONObject response) {\r\n            boolean error = false;\r\n            try {\r\n                JSONObject user = response.getJSONObject(\"user\");\r\n          \r\n            } catch (JSONException e) {\r\n                error = true;\r\n            }\r\n\r\n            if (error) {\r\n                // A JSON error occured\r\n            }\r\n            else {\r\n                // User has logged in\r\n            }\r\n        }\r\n\r\n        @Override\r\n        public void onFailure(Throwable e, JSONObject response) {\r\n            // Username or password were incorrect\r\n        }\r\n\r\n        @Override\r\n        public void onFinish() {\r\n            activity.hideProgressDialog();\r\n        }\r\n    };\r\n\r\n    activity.showProgressDialog(\"Logging you in\");\r\n    us.Login(\"username\", \"password\");\r\n\r\nImplementing new services\r\n=========================\r\n\r\nNew services should live in a class named after their group (System, Node, User) and Services (e.g. NodeServices). \r\n\r\nIt should have a ServicesClient property and it's constructor should set that property. \r\n\r\nParameters should be packaged in a JSONObject.\r\n\r\nCalls to services should be made using the provided methods in ServicesClient:\r\n\r\n* get(String method, JSONObject params, AsyncHttpResponseHandler responseHandler)\r\n* post(String method, JSONObject params, AsyncHttpResponseHandler responseHandler)\r\n* delete(String method, JSONObject params, AsyncHttpResponseHandler responseHandler)\r\n\r\n\r\nUploading large files\r\n=====================\r\n\r\nAndroid Asynchronous Http Client supports file uploading but reads the whole contents of the files in memory \r\nwhich will not work for large files, causing your application to crash with an out of memory exception.\r\n\r\nThe solution is to go a bit lower level and use the underlying HttpClient to do the upload attaching the files as \r\nInputStreams which will perform a streaming upload.\r\n\r\n    HttpParams httpParams = new BasicHttpParams();\r\n    HttpConnectionParams.setConnectionTimeout(httpParams, 900 * 1000);\r\n    HttpConnectionParams.setSoTimeout(httpParams, 900 * 1000);\r\n\r\n    HttpClient httpclient = ServicesClient.client.getHttpClient();\r\n    HttpContext httpContext = ServicesClient.client.getHttpContext();\r\n\r\n    HttpPost httppost = new HttpPost(\"http://www.example.com/api/mobile/service/upload\");\r\n    httppost.setParams(httpParams);\r\n\r\n    MultipartEntity entity = new MultipartEntity();\r\n    // Add parameters to the post body\r\n    entity.addPart(\"param1\", new StringBody(param1.toString(),\"application/json\", Charset.forName(\"UTF-8\")));\r\n    entity.addPart(\"param2\", new StringBody(param2.toString(),\"application/json\", Charset.forName(\"UTF-8\")));\r\n\r\n    InputStream istream1 = new FileInputStream(\"file1.jpg\");\r\n    entity.addPart(\"file1\", new InputStreamBody(istream1, \"file1\"));\r\n    InputStream istream2 = new FileInputStream(\"file2.jpg\");\r\n    entity.addPart(\"file2\", new InputStreamBody(istream2, \"file2\"));\r\n\r\n    httppost.setEntity(entity);\r\n    HttpResponse response = httpclient.execute(httppost, httpContext);\r\n\r\n\r\nProgress callback for upload\r\n============================\r\n\r\nHttpClient does not have built-in support for performing an upload with a progress callback and implementing one \r\nisn't trivial.\r\n\r\nFor file uploading you can implement a custom multi part entity that hooks into the file stream read operation and \r\ncounts how much data has been read.\r\n\r\n    int totalUploadSize = 0;\r\n\r\n    CustomMultiPartEntity postEntity = new CustomMultiPartEntity(new CustomMultiPartEntity.ProgressListener() {\r\n        @Override\r\n        public void transferred(long num) {\r\n            currentUploadSize = num;\r\n            updateUploadProgress((int) ((num / (float) totalUploadSize) * 100));\r\n            updateNotification((int) ((num / (float) totalUploadSize) * 100));\r\n        }\r\n    });\r\n\r\n    try {\r\n        postEntity.addPart(\"param1\", new StringBody(param1.toString(),\"application/json\", Charset.forName(\"UTF-8\")));\r\n        postEntity.addPart(\"param2\", new StringBody(param2.toString(),\"application/json\", Charset.forName(\"UTF-8\")));\r\n\r\n        totalUploadSize = postEntity.getContentLength();\r\n        for (Map.Entry<String, String> entry : files.entrySet()) {\r\n            try {\r\n                InputStream istream = new FileInputStream(entry.getValue());\r\n                postEntity.addPart(entry.getKey(), new InputStreamBody(istream, entry.getKey()));\r\n                totalUploadSize += new File(entry.getValue()).length();\r\n            } catch (FileNotFoundException e) {\r\n                e.printStackTrace();\r\n            }\r\n        }\r\n        httppost.setEntity(postEntity);\r\n    } \r\n    catch (UnsupportedEncodingException e) {\r\n        e.printStackTrace();  //To change body of catch statement use File | Settings | File Templates.\r\n    }\r\n    \r\n    HttpResponse response = httpclient.execute(httppost, httpContext);\r\n"}